(define (make-tree entry left right)
  (list entry left right))

(define (list->tree elements)
  (newline)
  (print (list 'partial-tree elements (length elements)))
  (car (partial-tree elements (length elements) 2)))

(define (partial-tree elts n depth)
  (let ((indent (make-string depth #\space))
        (indent-return (string-append (make-string (- depth 2) #\space) "^ ")))
    (if (= n 0)
        (let ((result (cons '() elts)))
          (print indent-return result)
          result)
        (let ((left-size (quotient (- n 1) 2)))
          (print indent (list 'partial-tree-left elts left-size))
          (let ((left-result (partial-tree elts left-size (+ depth 2))))
            (let ((left-tree (car left-result))
                  (non-left-elts (cdr left-result))
                  (right-size (- n (+ left-size 1))))
              (print indent (list 'partial-tree-right (cdr non-left-elts) right-size))
              (let ((this-entry (car non-left-elts))
                    (right-result (partial-tree (cdr non-left-elts)
                                                right-size
                                                (+ depth 2))))
                (let ((right-tree (car right-result))
                      (remaining-elts (cdr right-result)))
                  (let ((result (cons (make-tree this-entry left-tree right-tree)
                                      remaining-elts)))
                    (print indent-return result)
                    result)))))))))

(print (list->tree '()))
; ()

(print (list->tree '(1)))
; (1 () ())

(print (list->tree '(1 3 5)))
; (3 (1 () ()) (5 () ()))

(print (list->tree '(1 3 5 7 9 11)))
; (5 (1 () (3 () ())) (9 (7 () ()) (11 () ())))
